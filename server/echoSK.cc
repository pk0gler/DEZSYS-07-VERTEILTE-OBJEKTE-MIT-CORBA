// This file is generated by omniidl (C++ backend)- omniORB_4_2. Do not edit.

#include "echo.hh"
#include <omniORB4/IOP_S.h>
#include <omniORB4/IOP_C.h>
#include <omniORB4/callDescriptor.h>
#include <omniORB4/callHandle.h>
#include <omniORB4/objTracker.h>


OMNI_USING_NAMESPACE(omni)

static const char* _0RL_library_version = omniORB_4_2;



cb::CallBack_ptr cb::CallBack_Helper::_nil() {
  return ::cb::CallBack::_nil();
}

::CORBA::Boolean cb::CallBack_Helper::is_nil(::cb::CallBack_ptr p) {
  return ::CORBA::is_nil(p);

}

void cb::CallBack_Helper::release(::cb::CallBack_ptr p) {
  ::CORBA::release(p);
}

void cb::CallBack_Helper::marshalObjRef(::cb::CallBack_ptr obj, cdrStream& s) {
  ::cb::CallBack::_marshalObjRef(obj, s);
}

cb::CallBack_ptr cb::CallBack_Helper::unmarshalObjRef(cdrStream& s) {
  return ::cb::CallBack::_unmarshalObjRef(s);
}

void cb::CallBack_Helper::duplicate(::cb::CallBack_ptr obj) {
  if (obj && !obj->_NP_is_nil())  omni::duplicateObjRef(obj);
}

cb::CallBack_ptr
cb::CallBack::_duplicate(::cb::CallBack_ptr obj)
{
  if (obj && !obj->_NP_is_nil())  omni::duplicateObjRef(obj);
  return obj;
}

cb::CallBack_ptr
cb::CallBack::_narrow(::CORBA::Object_ptr obj)
{
  if (!obj || obj->_NP_is_nil() || obj->_NP_is_pseudo()) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


cb::CallBack_ptr
cb::CallBack::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if (!obj || obj->_NP_is_nil() || obj->_NP_is_pseudo()) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

cb::CallBack_ptr
cb::CallBack::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_CallBack _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_CallBack* _the_nil_ptr = 0;
  if (!_the_nil_ptr) {
    omni::nilRefLock().lock();
    if (!_the_nil_ptr) {
      _the_nil_ptr = new _objref_CallBack;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* cb::CallBack::_PD_repoId = "IDL:cb/CallBack:1.0";


cb::_objref_CallBack::~_objref_CallBack() {
  
}


cb::_objref_CallBack::_objref_CallBack(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::cb::CallBack::_PD_repoId, ior, id, 1)
   
   
{
  _PR_setobj(this);
}

void*
cb::_objref_CallBack::_ptrToObjRef(const char* id)
{
  if (id == ::cb::CallBack::_PD_repoId)
    return (::cb::CallBack_ptr) this;
  
  if (id == ::CORBA::Object::_PD_repoId)
    return (::CORBA::Object_ptr) this;

  if (omni::strMatch(id, ::cb::CallBack::_PD_repoId))
    return (::cb::CallBack_ptr) this;
  
  if (omni::strMatch(id, ::CORBA::Object::_PD_repoId))
    return (::CORBA::Object_ptr) this;

  return 0;
}


//
// Code for cb::CallBack::call_back

// Proxy call descriptor class. Mangled signature:
//  void_i_cstring
class _0RL_cd_db735b792e25d186_00000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_db735b792e25d186_00000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
};

void _0RL_cd_db735b792e25d186_00000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);

}

void _0RL_cd_db735b792e25d186_00000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();

}

const char* const _0RL_cd_db735b792e25d186_00000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_db735b792e25d186_10000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_db735b792e25d186_00000000* tcd = (_0RL_cd_db735b792e25d186_00000000*)cd;
  cb::_impl_CallBack* impl = (cb::_impl_CallBack*) svnt->_ptrToInterface(cb::CallBack::_PD_repoId);
  impl->call_back(tcd->arg_0);


}

void cb::_objref_CallBack::call_back(const char* mesg)
{
  _0RL_cd_db735b792e25d186_00000000 _call_desc(_0RL_lcfn_db735b792e25d186_10000000, "call_back", 10);
  _call_desc.arg_0 = mesg;

  _invoke(_call_desc);



}

cb::_pof_CallBack::~_pof_CallBack() {}


omniObjRef*
cb::_pof_CallBack::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::cb::_objref_CallBack(ior, id);
}


::CORBA::Boolean
cb::_pof_CallBack::is_a(const char* id) const
{
  if (omni::ptrStrMatch(id, ::cb::CallBack::_PD_repoId))
    return 1;
  
  return 0;
}

const cb::_pof_CallBack _the_pof_cb_mCallBack;

cb::_impl_CallBack::~_impl_CallBack() {}


::CORBA::Boolean
cb::_impl_CallBack::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if (omni::strMatch(op, "call_back")) {

    _0RL_cd_db735b792e25d186_00000000 _call_desc(_0RL_lcfn_db735b792e25d186_10000000, "call_back", 10, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }


  return 0;
}

void*
cb::_impl_CallBack::_ptrToInterface(const char* id)
{
  if (id == ::cb::CallBack::_PD_repoId)
    return (::cb::_impl_CallBack*) this;
  
  if (id == ::CORBA::Object::_PD_repoId)
    return (void*) 1;

  if (omni::strMatch(id, ::cb::CallBack::_PD_repoId))
    return (::cb::_impl_CallBack*) this;
  
  if (omni::strMatch(id, ::CORBA::Object::_PD_repoId))
    return (void*) 1;
  return 0;
}

const char*
cb::_impl_CallBack::_mostDerivedRepoId()
{
  return ::cb::CallBack::_PD_repoId;
}

cb::Server_ptr cb::Server_Helper::_nil() {
  return ::cb::Server::_nil();
}

::CORBA::Boolean cb::Server_Helper::is_nil(::cb::Server_ptr p) {
  return ::CORBA::is_nil(p);

}

void cb::Server_Helper::release(::cb::Server_ptr p) {
  ::CORBA::release(p);
}

void cb::Server_Helper::marshalObjRef(::cb::Server_ptr obj, cdrStream& s) {
  ::cb::Server::_marshalObjRef(obj, s);
}

cb::Server_ptr cb::Server_Helper::unmarshalObjRef(cdrStream& s) {
  return ::cb::Server::_unmarshalObjRef(s);
}

void cb::Server_Helper::duplicate(::cb::Server_ptr obj) {
  if (obj && !obj->_NP_is_nil())  omni::duplicateObjRef(obj);
}

cb::Server_ptr
cb::Server::_duplicate(::cb::Server_ptr obj)
{
  if (obj && !obj->_NP_is_nil())  omni::duplicateObjRef(obj);
  return obj;
}

cb::Server_ptr
cb::Server::_narrow(::CORBA::Object_ptr obj)
{
  if (!obj || obj->_NP_is_nil() || obj->_NP_is_pseudo()) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


cb::Server_ptr
cb::Server::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if (!obj || obj->_NP_is_nil() || obj->_NP_is_pseudo()) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

cb::Server_ptr
cb::Server::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_Server _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_Server* _the_nil_ptr = 0;
  if (!_the_nil_ptr) {
    omni::nilRefLock().lock();
    if (!_the_nil_ptr) {
      _the_nil_ptr = new _objref_Server;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* cb::Server::_PD_repoId = "IDL:cb/Server:1.0";


cb::_objref_Server::~_objref_Server() {
  
}


cb::_objref_Server::_objref_Server(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::cb::Server::_PD_repoId, ior, id, 1)
   
   
{
  _PR_setobj(this);
}

void*
cb::_objref_Server::_ptrToObjRef(const char* id)
{
  if (id == ::cb::Server::_PD_repoId)
    return (::cb::Server_ptr) this;
  
  if (id == ::CORBA::Object::_PD_repoId)
    return (::CORBA::Object_ptr) this;

  if (omni::strMatch(id, ::cb::Server::_PD_repoId))
    return (::cb::Server_ptr) this;
  
  if (omni::strMatch(id, ::CORBA::Object::_PD_repoId))
    return (::CORBA::Object_ptr) this;

  return 0;
}


//
// Code for cb::Server::one_time

// Proxy call descriptor class. Mangled signature:
//  void_i_ccb_mCallBack_i_cstring
class _0RL_cd_db735b792e25d186_20000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_db735b792e25d186_20000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  static const char* const _user_exns[];

  cb::CallBack_var arg_0_;
  cb::CallBack_ptr arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
};

void _0RL_cd_db735b792e25d186_20000000::marshalArguments(cdrStream& _n)
{
  cb::CallBack::_marshalObjRef(arg_0,_n);
  _n.marshalString(arg_1,0);

}

void _0RL_cd_db735b792e25d186_20000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = cb::CallBack::_unmarshalObjRef(_n);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();

}

const char* const _0RL_cd_db735b792e25d186_20000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_db735b792e25d186_30000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_db735b792e25d186_20000000* tcd = (_0RL_cd_db735b792e25d186_20000000*)cd;
  cb::_impl_Server* impl = (cb::_impl_Server*) svnt->_ptrToInterface(cb::Server::_PD_repoId);
  impl->one_time(tcd->arg_0, tcd->arg_1);


}

void cb::_objref_Server::one_time(::cb::CallBack_ptr cb, const char* mesg)
{
  _0RL_cd_db735b792e25d186_20000000 _call_desc(_0RL_lcfn_db735b792e25d186_30000000, "one_time", 9);
  _call_desc.arg_0 = cb;
  _call_desc.arg_1 = mesg;

  _invoke(_call_desc);



}


//
// Code for cb::Server::register

// Proxy call descriptor class. Mangled signature:
//  void_i_ccb_mCallBack_i_cstring_i_cunsigned_pshort
class _0RL_cd_db735b792e25d186_40000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_db735b792e25d186_40000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  static const char* const _user_exns[];

  cb::CallBack_var arg_0_;
  cb::CallBack_ptr arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  ::CORBA::UShort arg_2;
};

void _0RL_cd_db735b792e25d186_40000000::marshalArguments(cdrStream& _n)
{
  cb::CallBack::_marshalObjRef(arg_0,_n);
  _n.marshalString(arg_1,0);
  arg_2 >>= _n;

}

void _0RL_cd_db735b792e25d186_40000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = cb::CallBack::_unmarshalObjRef(_n);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();
  (::CORBA::UShort&)arg_2 <<= _n;

}

const char* const _0RL_cd_db735b792e25d186_40000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_db735b792e25d186_50000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_db735b792e25d186_40000000* tcd = (_0RL_cd_db735b792e25d186_40000000*)cd;
  cb::_impl_Server* impl = (cb::_impl_Server*) svnt->_ptrToInterface(cb::Server::_PD_repoId);
  impl->_cxx_register(tcd->arg_0, tcd->arg_1, tcd->arg_2);


}

void cb::_objref_Server::_cxx_register(::cb::CallBack_ptr cb, const char* mesg, ::CORBA::UShort period_secs)
{
  _0RL_cd_db735b792e25d186_40000000 _call_desc(_0RL_lcfn_db735b792e25d186_50000000, "register", 9);
  _call_desc.arg_0 = cb;
  _call_desc.arg_1 = mesg;
  _call_desc.arg_2 = period_secs;

  _invoke(_call_desc);



}


//
// Code for cb::Server::shutdown

// Proxy call descriptor class. Mangled signature:
//  void
class _0RL_cd_db735b792e25d186_60000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_db735b792e25d186_60000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  
    
  
  static const char* const _user_exns[];

  
};

const char* const _0RL_cd_db735b792e25d186_60000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_db735b792e25d186_70000000(omniCallDescriptor*, omniServant* svnt)
{
  
  cb::_impl_Server* impl = (cb::_impl_Server*) svnt->_ptrToInterface(cb::Server::_PD_repoId);
  impl->shutdown();


}

void cb::_objref_Server::shutdown()
{
  _0RL_cd_db735b792e25d186_60000000 _call_desc(_0RL_lcfn_db735b792e25d186_70000000, "shutdown", 9);


  _invoke(_call_desc);



}

cb::_pof_Server::~_pof_Server() {}


omniObjRef*
cb::_pof_Server::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::cb::_objref_Server(ior, id);
}


::CORBA::Boolean
cb::_pof_Server::is_a(const char* id) const
{
  if (omni::ptrStrMatch(id, ::cb::Server::_PD_repoId))
    return 1;
  
  return 0;
}

const cb::_pof_Server _the_pof_cb_mServer;

cb::_impl_Server::~_impl_Server() {}


::CORBA::Boolean
cb::_impl_Server::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if (omni::strMatch(op, "one_time")) {

    _0RL_cd_db735b792e25d186_20000000 _call_desc(_0RL_lcfn_db735b792e25d186_30000000, "one_time", 9, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "register")) {

    _0RL_cd_db735b792e25d186_40000000 _call_desc(_0RL_lcfn_db735b792e25d186_50000000, "register", 9, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "shutdown")) {

    _0RL_cd_db735b792e25d186_60000000 _call_desc(_0RL_lcfn_db735b792e25d186_70000000, "shutdown", 9, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }


  return 0;
}

void*
cb::_impl_Server::_ptrToInterface(const char* id)
{
  if (id == ::cb::Server::_PD_repoId)
    return (::cb::_impl_Server*) this;
  
  if (id == ::CORBA::Object::_PD_repoId)
    return (void*) 1;

  if (omni::strMatch(id, ::cb::Server::_PD_repoId))
    return (::cb::_impl_Server*) this;
  
  if (omni::strMatch(id, ::CORBA::Object::_PD_repoId))
    return (void*) 1;
  return 0;
}

const char*
cb::_impl_Server::_mostDerivedRepoId()
{
  return ::cb::Server::_PD_repoId;
}

POA_cb::CallBack::~CallBack() {}

POA_cb::Server::~Server() {}

